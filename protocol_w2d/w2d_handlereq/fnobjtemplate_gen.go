// Code generated by "genprotocol -ver=311c9c290570c203090ea3d20ebbf006c810eb958a7a96aef942015fbfd89d2f -basedir=. -prefix=w2d -statstype=int"

package w2d_handlereq

/* obj base demux fn map template
	var DemuxReq2ObjAPIFnMap = [...]func(
		me interface{}, hd w2d_packet.Header, robj interface{}) (
		w2d_packet.Header, interface{}, error){
	w2d_idcmd.Invalid: Req2ObjAPI_Invalid,
w2d_idcmd.ListStage: Req2ObjAPI_ListStage,
w2d_idcmd.EnterStage: Req2ObjAPI_EnterStage,
w2d_idcmd.LeaveStage: Req2ObjAPI_LeaveStage,
w2d_idcmd.ChatToStage: Req2ObjAPI_ChatToStage,
w2d_idcmd.MakeTeam: Req2ObjAPI_MakeTeam,
w2d_idcmd.Act: Req2ObjAPI_Act,
w2d_idcmd.Heartbeat: Req2ObjAPI_Heartbeat,

}   // DemuxReq2ObjAPIFnMap

	func Req2ObjAPI_Invalid(
		me interface{}, hd w2d_packet.Header, robj interface{}) (
		w2d_packet.Header, interface{},  error) {
		req, ok := robj.(*w2d_obj.ReqInvalid_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqInvalid(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqInvalid(
		me interface{}, hd w2d_packet.Header, robj *w2d_obj.ReqInvalid_data) (
		w2d_packet.Header, *w2d_obj.RspInvalid_data, error) {
		sendHeader := w2d_packet.Header{
			ErrorCode : w2d_error.None,
		}
		sendBody := &w2d_obj.RspInvalid_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_ListStage(
		me interface{}, hd w2d_packet.Header, robj interface{}) (
		w2d_packet.Header, interface{},  error) {
		req, ok := robj.(*w2d_obj.ReqListStage_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqListStage(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqListStage(
		me interface{}, hd w2d_packet.Header, robj *w2d_obj.ReqListStage_data) (
		w2d_packet.Header, *w2d_obj.RspListStage_data, error) {
		sendHeader := w2d_packet.Header{
			ErrorCode : w2d_error.None,
		}
		sendBody := &w2d_obj.RspListStage_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_EnterStage(
		me interface{}, hd w2d_packet.Header, robj interface{}) (
		w2d_packet.Header, interface{},  error) {
		req, ok := robj.(*w2d_obj.ReqEnterStage_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqEnterStage(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqEnterStage(
		me interface{}, hd w2d_packet.Header, robj *w2d_obj.ReqEnterStage_data) (
		w2d_packet.Header, *w2d_obj.RspEnterStage_data, error) {
		sendHeader := w2d_packet.Header{
			ErrorCode : w2d_error.None,
		}
		sendBody := &w2d_obj.RspEnterStage_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_LeaveStage(
		me interface{}, hd w2d_packet.Header, robj interface{}) (
		w2d_packet.Header, interface{},  error) {
		req, ok := robj.(*w2d_obj.ReqLeaveStage_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqLeaveStage(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqLeaveStage(
		me interface{}, hd w2d_packet.Header, robj *w2d_obj.ReqLeaveStage_data) (
		w2d_packet.Header, *w2d_obj.RspLeaveStage_data, error) {
		sendHeader := w2d_packet.Header{
			ErrorCode : w2d_error.None,
		}
		sendBody := &w2d_obj.RspLeaveStage_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_ChatToStage(
		me interface{}, hd w2d_packet.Header, robj interface{}) (
		w2d_packet.Header, interface{},  error) {
		req, ok := robj.(*w2d_obj.ReqChatToStage_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqChatToStage(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqChatToStage(
		me interface{}, hd w2d_packet.Header, robj *w2d_obj.ReqChatToStage_data) (
		w2d_packet.Header, *w2d_obj.RspChatToStage_data, error) {
		sendHeader := w2d_packet.Header{
			ErrorCode : w2d_error.None,
		}
		sendBody := &w2d_obj.RspChatToStage_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_MakeTeam(
		me interface{}, hd w2d_packet.Header, robj interface{}) (
		w2d_packet.Header, interface{},  error) {
		req, ok := robj.(*w2d_obj.ReqMakeTeam_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqMakeTeam(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqMakeTeam(
		me interface{}, hd w2d_packet.Header, robj *w2d_obj.ReqMakeTeam_data) (
		w2d_packet.Header, *w2d_obj.RspMakeTeam_data, error) {
		sendHeader := w2d_packet.Header{
			ErrorCode : w2d_error.None,
		}
		sendBody := &w2d_obj.RspMakeTeam_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_Act(
		me interface{}, hd w2d_packet.Header, robj interface{}) (
		w2d_packet.Header, interface{},  error) {
		req, ok := robj.(*w2d_obj.ReqAct_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqAct(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqAct(
		me interface{}, hd w2d_packet.Header, robj *w2d_obj.ReqAct_data) (
		w2d_packet.Header, *w2d_obj.RspAct_data, error) {
		sendHeader := w2d_packet.Header{
			ErrorCode : w2d_error.None,
		}
		sendBody := &w2d_obj.RspAct_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_Heartbeat(
		me interface{}, hd w2d_packet.Header, robj interface{}) (
		w2d_packet.Header, interface{},  error) {
		req, ok := robj.(*w2d_obj.ReqHeartbeat_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqHeartbeat(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqHeartbeat(
		me interface{}, hd w2d_packet.Header, robj *w2d_obj.ReqHeartbeat_data) (
		w2d_packet.Header, *w2d_obj.RspHeartbeat_data, error) {
		sendHeader := w2d_packet.Header{
			ErrorCode : w2d_error.None,
		}
		sendBody := &w2d_obj.RspHeartbeat_data{
		}
		return sendHeader, sendBody, nil
	}

*/
