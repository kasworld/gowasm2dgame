// Code generated by "genprotocol.exe -ver=56a40c9afaeea01bb7ff0ceed1dabb8a62deedd1dfa2e5c804d9e37c44d134ca -basedir=protocol_w2d -prefix=w2d -statstype=int"

package w2d_handlersp

import (
	"fmt"

	"github.com/kasworld/gowasm2dgame/protocol_w2d/w2d_idcmd"
	"github.com/kasworld/gowasm2dgame/protocol_w2d/w2d_obj"
	"github.com/kasworld/gowasm2dgame/protocol_w2d/w2d_packet"
)

// obj base demux fn map

var DemuxRsp2ObjFnMap = [...]func(me interface{}, hd w2d_packet.Header, body interface{}) error{
	w2d_idcmd.Invalid:   objRecvRspFn_Invalid,   // Invalid not used, make empty packet error
	w2d_idcmd.Login:     objRecvRspFn_Login,     // Login make session with nickname and enter stage
	w2d_idcmd.Heartbeat: objRecvRspFn_Heartbeat, // Heartbeat prevent connection timeout
	w2d_idcmd.Chat:      objRecvRspFn_Chat,      // Chat chat to stage
	w2d_idcmd.Act:       objRecvRspFn_Act,       // Act send user action

}

// Invalid not used, make empty packet error
func objRecvRspFn_Invalid(me interface{}, hd w2d_packet.Header, body interface{}) error {
	robj, ok := body.(*w2d_obj.RspInvalid_data)
	if !ok {
		return fmt.Errorf("packet mismatch %v", body)
	}
	return fmt.Errorf("Not implemented %v", robj)
}

// Login make session with nickname and enter stage
func objRecvRspFn_Login(me interface{}, hd w2d_packet.Header, body interface{}) error {
	robj, ok := body.(*w2d_obj.RspLogin_data)
	if !ok {
		return fmt.Errorf("packet mismatch %v", body)
	}
	return fmt.Errorf("Not implemented %v", robj)
}

// Heartbeat prevent connection timeout
func objRecvRspFn_Heartbeat(me interface{}, hd w2d_packet.Header, body interface{}) error {
	robj, ok := body.(*w2d_obj.RspHeartbeat_data)
	if !ok {
		return fmt.Errorf("packet mismatch %v", body)
	}
	return fmt.Errorf("Not implemented %v", robj)
}

// Chat chat to stage
func objRecvRspFn_Chat(me interface{}, hd w2d_packet.Header, body interface{}) error {
	robj, ok := body.(*w2d_obj.RspChat_data)
	if !ok {
		return fmt.Errorf("packet mismatch %v", body)
	}
	return fmt.Errorf("Not implemented %v", robj)
}

// Act send user action
func objRecvRspFn_Act(me interface{}, hd w2d_packet.Header, body interface{}) error {
	robj, ok := body.(*w2d_obj.RspAct_data)
	if !ok {
		return fmt.Errorf("packet mismatch %v", body)
	}
	return fmt.Errorf("Not implemented %v", robj)
}
