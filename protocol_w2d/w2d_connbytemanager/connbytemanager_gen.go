// Code generated by "genprotocol -ver=311c9c290570c203090ea3d20ebbf006c810eb958a7a96aef942015fbfd89d2f -basedir=. -prefix=w2d -statstype=int"

package w2d_connbytemanager

import (
	"fmt"
	"sync"

	"github.com/kasworld/gowasm2dgame/protocol_w2d/w2d_serveconnbyte"
)

type Manager struct {
	mutex   sync.RWMutex
	id2Conn map[string]*w2d_serveconnbyte.ServeConnByte
}

func New() *Manager {
	rtn := &Manager{
		id2Conn: make(map[string]*w2d_serveconnbyte.ServeConnByte),
	}
	return rtn
}
func (cm *Manager) Add(id string, c2sc *w2d_serveconnbyte.ServeConnByte) error {
	cm.mutex.Lock()
	defer cm.mutex.Unlock()
	if cm.id2Conn[id] != nil {
		return fmt.Errorf("already exist %v", id)
	}
	cm.id2Conn[id] = c2sc
	return nil
}
func (cm *Manager) Del(id string) error {
	cm.mutex.Lock()
	defer cm.mutex.Unlock()
	if cm.id2Conn[id] == nil {
		return fmt.Errorf("not exist %v", id)
	}
	delete(cm.id2Conn, id)
	return nil
}
func (cm *Manager) Get(id string) *w2d_serveconnbyte.ServeConnByte {
	cm.mutex.RLock()
	defer cm.mutex.RUnlock()
	return cm.id2Conn[id]
}
func (cm *Manager) Len() int {
	return len(cm.id2Conn)
}
func (cm *Manager) GetList() []*w2d_serveconnbyte.ServeConnByte {
	rtn := make([]*w2d_serveconnbyte.ServeConnByte, 0, len(cm.id2Conn))
	cm.mutex.RLock()
	defer cm.mutex.RUnlock()
	for _, v := range cm.id2Conn {
		rtn = append(rtn, v)
	}
	return rtn
}
